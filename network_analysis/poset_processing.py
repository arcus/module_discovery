import networkx as nx
import pandas as pd
import module_data

df = module_data.df

# Create a networkx graph with module ids as its vertices
G = nx.DiGraph()
G.add_nodes_from(df.index)

# Add directed edges from depends_on_knowledge_in and sets_you_up_for
for module_id in df.index:
    for linked_module in df.index:
        if str(linked_module) in str(df.loc[module_id, "sets_you_up_for"]):
            G.add_edge(module_id, linked_module)
        if str(linked_module) in str(df.loc[module_id, "depends_on_knowledge_available_in"]):
            G.add_edge(linked_module, module_id)

# Build maximal and minimal directed acyclic graphs
poset = nx.transitive_closure(G) #The this is the graph of the partially ordered set generated by the module dependency relationships
hasse = nx.transitive_reduction(G) # This is the reduced version (aka Hasse diagram) of the partially ordered set, which will be displayed